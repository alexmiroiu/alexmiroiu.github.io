{"version":3,"sources":["components/Controls.module.css","components/Canvas.module.css","components/Controls.js","components/Canvas.js","components/Main.js","App.js","index.js"],"names":["module","exports","Controls","props","className","classes","controls","colorWrapper","htmlFor","colorInput","type","name","value","color","onChange","event","onColorChange","target","rangeWrapper","size","rangeInput","min","max","onSizeChange","Canvas","useState","isDrawing","setIsDrawing","window","innerWidth","windowWidth","setWindowWidth","innerHeight","windowHeight","setWindowHeight","canvasRef","useRef","contextRef","addEventListener","useEffect","canvas","current","width","height","console","log","context","getContext","lineCap","strokeStyle","lineWidth","brushColor","brushSize","canvasItem","ref","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","stroke","moveTo","onMouseUp","closePath","onMouseMove","lineTo","button","onClick","clearRect","Main","selectedColor","setSelectedColor","setBrushSize","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05509182.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__3PxKr\",\"colorWrapper\":\"Controls_colorWrapper__3k1UG\",\"rangeWrapper\":\"Controls_rangeWrapper__1JegQ\",\"colorInput\":\"Controls_colorInput__3IsSR\",\"rangeInput\":\"Controls_rangeInput__3gSg7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvasItem\":\"Canvas_canvasItem__3Lyrq\",\"button\":\"Canvas_button__2elPY\"};","import classes from './Controls.module.css';\r\n\r\nconst Controls = (props) => {\r\n\r\n    \r\n\r\n    return <div className={classes.controls}>\r\n        <div className={classes.colorWrapper}>\r\n            <label htmlFor=\"color\">Choose brush color</label>\r\n            <input className={classes.colorInput} type=\"color\" name=\"color\" value={props.color} onChange={event => {props.onColorChange(event.target.value)}} />\r\n        </div>\r\n        <div className={classes.rangeWrapper}>\r\n            <label htmlFor=\"range\">Choose brush size</label>\r\n            <span>{props.size}</span>\r\n            <input className={classes.rangeInput} type=\"range\" value={props.size} min=\"1\" max=\"20\" onChange={event => {props.onSizeChange(event.target.value)}} />\r\n        </div>\r\n    </div>\r\n    \r\n\r\n}\r\n\r\nexport default Controls;","import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport classes from './Canvas.module.css';\r\n\r\nconst Canvas = (props) => {\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n    const [windowHeight, setWindowHeight] = useState(window.innerHeight);\r\n\r\n    const canvasRef = useRef();\r\n    const contextRef = useRef();\r\n\r\n    window.addEventListener('resize', () => {\r\n        setWindowWidth(window.innerWidth);\r\n        setWindowHeight(window.innerHeight);\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        canvas.width = windowWidth*80/100;\r\n        canvas.height = windowHeight*50/100;\r\n        console.log('useEFFECT one')\r\n        \r\n        const context = canvas.getContext('2d');\r\n        context.lineCap = \"round\";\r\n        context.strokeStyle = 'black';\r\n        context.lineWidth = 1;\r\n        contextRef.current = context;\r\n\r\n    }, [windowWidth, windowHeight])\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        \r\n        const context = canvas.getContext('2d');\r\n        context.lineCap = \"round\";\r\n        context.strokeStyle = props.brushColor;\r\n        context.lineWidth = props.brushSize;\r\n        contextRef.current = context;\r\n\r\n\r\n    }, [props.brushColor, props.brushSize])\r\n\r\n    const clearCanvas = () => {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.clearRect(0,0, windowWidth*80/100, windowHeight*50/100);\r\n        setIsDrawing(false);\r\n    }\r\n\r\n\r\n    const startDrawing = ({nativeEvent}) => {\r\n        // console.log(nativeEvent)\r\n        const {offsetX, offsetY} = nativeEvent;\r\n        setIsDrawing(true);\r\n        contextRef.current.beginPath();\r\n        contextRef.current.stroke();\r\n        contextRef.current.moveTo(offsetX, offsetY);\r\n        \r\n        \r\n    }\r\n\r\n    const draw = ({nativeEvent}) => {\r\n        if(!isDrawing) {\r\n            return;\r\n        }\r\n        const {offsetX, offsetY} = nativeEvent;\r\n        contextRef.current.lineTo(offsetX, offsetY);\r\n        contextRef.current.stroke();\r\n        if(offsetX > canvasRef.current.width || offsetY > canvasRef.current.height || offsetX < 0 || offsetY < 0) {\r\n            // contextRef.current.closePath();\r\n            setIsDrawing(false)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const finishDrawing = () => {\r\n        if(isDrawing) {\r\n            contextRef.current.stroke();\r\n            contextRef.current.closePath();\r\n            setIsDrawing(false);\r\n\r\n        }\r\n    }\r\n\r\n\r\nreturn( \r\n        <Fragment>\r\n            <canvas className={classes.canvasItem} ref={canvasRef} onMouseDown={startDrawing} onMouseUp={finishDrawing} onMouseMove={draw}></canvas>;\r\n            <button className={classes.button} onClick={clearCanvas}>Clear board</button>\r\n        </Fragment>)\r\n}\r\n\r\nexport default Canvas;","import { Fragment, useState } from 'react';\r\nimport classes from './Main.module.css';\r\n\r\n\r\nimport Controls from './Controls';\r\nimport Canvas from './Canvas';\r\n\r\nconst Main = () => {\r\n    const [selectedColor, setSelectedColor] = useState('black');\r\n    const [brushSize, setBrushSize] = useState(1);\r\n\r\n    const changeColor = (color) => {\r\n        setSelectedColor(color);\r\n        console.log(`color has been changed to ${selectedColor}`)\r\n    }\r\n\r\n    const changeBrushSize = (size) => {\r\n        setBrushSize(size);\r\n    }\r\n\r\n\r\n\r\n\r\n    return <Fragment> \r\n    <h1>Go ahead and draw anything you like</h1>\r\n    <Canvas brushColor={selectedColor} brushSize={brushSize}></Canvas>\r\n    <div>\r\n      <Controls onColorChange={changeColor} color={selectedColor} onSizeChange={changeBrushSize} size={brushSize}/>\r\n    </div>\r\n    </Fragment>\r\n}\r\n\r\nexport default Main;","import './App.css';\n\nimport Main from './components/Main';\n\nfunction App() {\n  return <Main></Main>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}